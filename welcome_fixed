#!/bin/bash
#
# Welcome: the EndeavourOS greeter.
#
# Shows useful basic info about the EndeavourOS and its usage.
# Targeted for people new to EndeavourOS (but not new to Linux).
#
# TODO:
# - add icons to buttons once proper supported exists in yad

export PROGNAME=eos-welcome
export PRETTY_PROGNAME="Welcome"

EOS_SCRIPTS_DIR=/usr/share/endeavouros/scripts
translations_dir=$EOS_SCRIPTS_DIR                 # used also by the translation.bash !!

source $translations_dir/translations.bash


#################################################################################
EOS_SCRIPTS_YAD=$EOS_SCRIPTS_DIR/eos-script-lib-yad
test -r  $EOS_SCRIPTS_YAD || {
    echo "ERROR: cannot find $EOS_SCRIPTS_YAD" >&2
    exit 1
}
source $EOS_SCRIPTS_YAD

unset EOS_SCRIPTS_YAD

export -f eos_yad
export -f eos_yad_terminal
export -f eos_yad_check_internet_connection
export -f eos_yad_GetArgVal
export -f eos_yad_RunCmdTermBash
export -f eos_yad_problem
export -f eos_yad_DIE
export -f eos_yad_WARN
export -f eos_yad__detectDE
export -f eos_yad_GetDesktopName
export -f eos_GetArch
export -f eos_select_browser
export -f eos_yad_nothing_todo
#################################################################################

export PROG_PACKAGENAME="welcome"
export INSTALLER_PROGRAM=/usr/bin/calamares
export EOS_LIVEUSER=liveuser
export EOS_KEEP_PKGS
export PROG_VERSION="$(expac -Q %v $PROG_PACKAGENAME)"
export INSTALL_LOG_FILE=/home/$EOS_LIVEUSER/endeavour-install.log


AfterTranslations() {
    # Here we have definitions that require special treatment because of
    # yad running in other processes...

    export WH_BUTT_TITLE="$(ltr help_butt_title)"
    export WH_BUTT_TEXT="$(ltr help_butt_text)"

    export CAL_NOAVAIL="$(ltr cal_noavail)"
    export CAL_WARN="$(ltr cal_warn)"
    export CAL_INFO1="$(ltr cal_info1)"
    export CAL_INFO2="$(ltr cal_info2)"
    export CAL_INFO3="$(ltr cal_info3)"
    export CAL_INFO4="$(ltr cal_info4)"
    export CAL_CHOOSE="$(ltr cal_choose)"
    export CAL_METHOD="$(ltr cal_method)"
    export CAL_NOSUPPORT="$(ltr cal_nosupport)"
    export CAL_NOFILE="$(ltr cal_nofile)"
    export CAL_ISTARTED="$(ltr cal_istarted)"
    export CAL_ISTOPPED="$(ltr cal_istopped)"
    export ISSUES_TITLE="$(ltr issues_title)"
    export ISSUES_FRUB="$(ltr issues_grub)"
    export ISSUES_RUN="$(ltr issues_run)"
    export ISSUES_NO="$(ltr issues_no)"
    export SYSUP_NO="$(ltr sysup_no)"
    export SYSUP_CHECK="$(ltr sysup_check)"
    export INSTALL_INSTALLER="$(ltr install_installer)"
    export INSTALL_ALREADY="$(ltr install_already)"
    export INSTALL_ING="$(ltr install_ing)"
    export INSTALL_DONE="$(ltr install_done)"
    export DM_TITLE="$(ltr dm_title)"
    export DM_COL_NAME1="$(ltr dm_col_name1)"
    export DM_COL_NAME2="$(ltr dm_col_name2)"
    export DM_REBOOT_REQUIRED="$(ltr dm_reboot_required)"
    export DM_CHANGED="$(ltr dm_changed)"
    export DM_FAILED="$(ltr dm_failed)"
    export DM_WARNING_TITLE="$(ltr dm_warning_title)"
    export AFTER_INSTALL_US="$(ltr after_install_us)"
    export AFTER_INSTALL_US_FROM="$(ltr after_install_us_from)"
    export AFTER_INSTALL_US_EL="$(ltr after_install_us_el)"
    export AFTER_INSTALL_US_DONE="$(ltr after_install_us_done)"
    export AFTER_INSTALL_US_FAIL="$(ltr after_install_us_fail)"
    export UPDT_NOTHING_TODO="$(ltr updt_nothing_todo)"
    export UPDT_UPDATE_CHECK="$(ltr updt_update_check):"

    export INS_CUST_TEXT="$(ltr ins_cust_text)"
    export INS_CUST_TEXT2="$(ltr ins_cust_text2)"
    export INS_CUST_TEXT3="$(ltr ins_cust_text3)"
}

IsInstalled() { expac -Q %n "$1" >& /dev/null ; }
export -f IsInstalled

IsInstalling() {
    test "$show_installer" = "yes" && return 0
    test -x $INSTALLER_PROGRAM && test "$LOGNAME" = "$EOS_LIVEUSER"
}
export -f IsInstalling

Welog() {
    [ -d /home/$EOS_LIVEUSER ] && echo "$PROGNAME: " "$@" >> $INSTALL_LOG_FILE
}
export -f Welog

yad_Install() {
    # Install one or more given packages. Does not reinstall any packages.

    local yadcmd=(
        eos_yad --text-info --width=600 --height=500 --title="$INSTALL_INSTALLER" --wrap --tail --button=yad-quit:0 --fontname="Mono 10"
    )
    local pkg pkgs=()

    for pkg in "$@" ; do
        case "$pkg" in
            */*) pkgs+=("$pkg") ;;                                    # $repo/$pkg: force install
            *)   IsInstalled "$pkg" >& /dev/null || pkgs+=("$pkg") ;;
        esac
    done
    test -z "$pkgs" && {
        echo "$*: $INSTALL_ALREADY" | "${yadcmd[@]}"
        return
    }
    while true ; do
        echo "$INSTALL_ING ${pkgs[*]} ..."
        pkexec pacman -S --noconfirm "${pkgs[@]}"
        echo "$INSTALL_DONE"
        break
    done |& "${yadcmd[@]}"
}
export -f yad_Install

yad_GetCurrentDM() {
    local current=$(ls -l /etc/systemd/system/display-manager.service | awk '{print $NF}')
    current="$(basename $current .service)"
    echo "$current"
}
export -f yad_GetCurrentDM

yad_ChangeDisplayManager() {
    local cmd count
    local dmlist="" dm
    local dms=(gdm lightdm lxdm sddm)
    local current=$(yad_GetCurrentDM)

    count="${#dms[@]}"

    cmd=(eos_yad --list --radiolist --title="$DM_TITLE" --width=300 --height=200)
    cmd+=(--column="$DM_COL_NAME1":rd --column="$DM_COL_NAME2")

    for ((ix=0; ix<count; ix++)) ; do
        dm="${dms[$ix]}"
        case "$dm" in
            $current) cmd+=(true  "$dm") ;;
            *)        cmd+=(false "$dm") ;;
        esac
    done

    # selected new dm
    dm="$("${cmd[@]}" | cut -d '|' -f 2)"

    case "$dm" in
        "$current" | "") return ;;
    esac

    cmd=""
    IsInstalled "$dm" >& /dev/null || {
        case "$dm" in
            lightdm) cmd+="pacman -S ${dm}{,-gtk-greeter{,-settings}} --noconfirm >& /dev/null && ";;
            *)       cmd+="pacman -S $dm --noconfirm >& /dev/null && " ;;
        esac
    }
    cmd+="systemctl disable $current && systemctl enable $dm"
    pkexec bash -c "$cmd"

    if [ "$(yad_GetCurrentDM)" = "$dm" ] ; then
        echo "$DM_REBOOT_REQUIRED" | \
            eos_yad --text-info --title="$DM_CHANGED $dm" --wrap --width=300 --height=200 --button=yad-quit:0
    else
        echo "$DM_FAILED" | \
            eos_yad --text-info --title="$DM_WARNING_TITLE" --width=300 --height=200 --button=yad-quit:0
    fi
}
export -f yad_ChangeDisplayManager

WelcomeDevelConf() {
    # Supported config file variables, defaults, and supported values:
    #    local _show_change_reso=no      # yes or no
    #
    local varname="$1"
    local fallback="$2"

    test -n "$fallback" || {
        echo "Error: ${FUNCNAME[1]} calling ${FUNCNAME[0]}: must give two parameters!" >&2
        return 1
    }

    local devconf="$HOME/.config/welcome-devel.conf"
    local answer="$fallback"

    if [ -r "$devconf" ] ; then
        source "$devconf"
        answer="${!varname}"
        test -n "$answer" || answer="$fallback"
    fi
    echo "$answer"

}
export -f WelcomeDevelConf

ShowChangeResoButton() {
    # Allow showing a button for changing the display resolution?

    [ -x /usr/bin/xrandr ] || return

    local show_reso_butt="$(WelcomeDevelConf _show_change_reso no)"

    if [ "$show_reso_butt" = "no" ] ; then
        case "$(device-info --vm)" in
            virtualbox | qemu | kvm | vmware)
                show_reso_butt=yes ;;                  # in a VM always show the button
        esac
    fi
    if [ -x $INSTALLER_PROGRAM ] || [ "$LOGNAME" = "$EOS_LIVEUSER" ] || [ "$show_installer" = "yes" ] ; then
        show_reso_butt=yes                  # show the button if installing
    fi

    if [ "$show_reso_butt" = "yes" ] ; then
        tabcontents+=(--field=" $(ltr ins_reso)!$WELCOME_ICON_CHANGE_RESOLUTION!$(ltr ins_resotip)":fbtn   ChangeDisplayResolution)
    fi
}
export -f ShowChangeResoButton

RateMirrors() {
    local delay="$RATE_MIRRORS_MAX_DELAY_ARCH"
    [ -n "$delay" ] || delay=3600
    RunInTerminal "rate-mirrors --save /tmp/mirrorlist arch --max-delay=$delay && sudo cp /tmp/mirrorlist /etc/pacman.d/"
}
export -f RateMirrors

MirrorRankingButtons() {
    if [ "$(eos_GetArch)" != "armv7h" ] ; then
        if [ -x /usr/bin/reflector-simple ] ; then
            tabcontents+=(
                --field=" $(ltr after_install_um) (Arch, reflector-simple)!$WELCOME_ICON_MIRROR_UPDATE!$(ltr after_install_umtip)":fbtn "reflector-simple"
            )
        fi
        if [ -x /usr/bin/rate-mirrors ] ; then
            tabcontents+=(
                --field=" $(ltr after_install_um) (Arch, rate-mirrors)!$WELCOME_ICON_MIRROR_UPDATE!$(ltr after_install_umtip)":fbtn "RateMirrors"
            )
        fi
    fi
    if [ -x /usr/bin/eos-rankmirrors ] ; then
        tabcontents+=(
            --field=" $(ltr after_install_um) (EndeavourOS)!$WELCOME_ICON_MIRROR_UPDATE!$(ltr after_install_umtip)":fbtn "RunInTerminal eos-rankmirrors"
        )
    fi
}
export -f MirrorRankingButtons

ButtonsMayHide() {
  local -n _text_="$1"
  if [ "$has_a_connection" = "no" ] ; then
      _text_+="\n$(ltr ins_no_connection)"
  fi
}

INSTALL() {
  local handle="$1"
  local tabnum="$2"
  local btdoc="https://discovery.endeavouros.com/bluetooth/bluetooth/2021/03"
  local INSTALLER_BROWSER=firefox
  local text="<b>$(ltr ins_text)</b>"

  ButtonsMayHide text

  local tabcontents=(
      eos_yad --align-buttons --use-interp
      --plug="$handle" --tabnum="$tabnum" --form  --columns=2
      --image=$WELCOME_ICON_INSTALL_OFFICIAL                       # $WELCOME_ICON_INSTALL_TAB
      --text="$text"
      --text-align=left

      --field=" $(ltr ins_start)!$WELCOME_ICON_INSTALL_OFFICIAL!$(ltr ins_starttip)":fbtn                   "eos-install-mode-run-calamares '$lang' ''"
      --field=" EndeavourOS ARM Image Installer!$WELCOME_ICON_ARM!Start installing EndeavourOS ARM edition":fbtn    "arm-eos-welcome-installer"
  )
  if [ "$has_a_connection" = "yes" ] ; then
      tabcontents+=(
          --field=" $(ltr ins_custom)!$WELCOME_ICON_INSTALLATION_TIPS!$(ltr ins_custom_tip)":fbtn "$INSTALLER_BROWSER 'https://discovery.endeavouros.com/installation/customizing-the-endeavouros-install-process/2022/03'"
      )
      MirrorRankingButtons
  fi

  ShowChangeResoButton

  tabcontents+=(
      --field=" $(ltr ins_pm)!$WELCOME_ICON_PARTITION_MANAGER!$(ltr ins_pmtip)":fbtn                  'gparted'
  )
  if [ "$has_a_connection" = "yes" ] ; then
      tabcontents+=(
          --field=" $(ltr ins_blue_notes)!$WELCOME_ICON_BLUETOOTH_INFO!$(ltr ins_blue_notes_tip)":fbtn    "$INSTALLER_BROWSER '$btdoc'"
          --field=" $(ltr ins_rel)!$WELCOME_ICON_LATEST_RELEASE!$(ltr ins_reltip)":fbtn                   "$INSTALLER_BROWSER https://endeavouros.com/latest-release"
          --field=" $(ltr ins_tips)!$WELCOME_ICON_INSTALLATION_TIPS!$(ltr ins_tipstip)":fbtn              "$INSTALLER_BROWSER https://discovery.endeavouros.com/category/installation"
          --field=" $(ltr ins_syslog)!$WELCOME_ICON_SYSTEM_LOGS_HOWTO!$(ltr ins_syslogtip)":fbtn          "$INSTALLER_BROWSER https://discovery.endeavouros.com/forum-log-tool-options/how-to-include-systemlogs-in-your-post"
          --field=" $(ltr ins_customized)!$WELCOME_ICON_INSTALL_COMMUNITY!$(ltr ins_cust_text)":fbtn      "AskUserCustomUrl"
      )
  fi

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}

AskUserCustomUrl() {
    local url=""
    local cmd=(
        eos_yad --entry
        --title="$INS_CUST_TEXT"
        --text="${INS_CUST_TEXT2}. $INS_CUST_TEXT3."
        --image=$WELCOME_ICON_QUESTION
    )

    url=$("${cmd[@]}")
    if [ $? -eq 0 ] ; then
        MagicId_new "$url"
    fi
}
export -f AskUserCustomUrl

GeneralInfo() {
  local handle="$1"
  local tabnum="$2"
  local text="<b>$(ltr general_info_text)</b>"

  ButtonsMayHide text

  local tabcontents=(
      eos_yad --align-buttons --use-interp
      --plug="$handle" --tabnum="$tabnum" --form --columns=2
      --image=$WELCOME_ICON_QUESTION
      --text="$text"
      --text-align=left
      --field=" $(ltr general_info_ws)!$WELCOME_ICON_WEBSITE!https://endeavouros.com":fbtn          "WelcomeBrowser https://endeavouros.com"
      --field=" $(ltr general_info_wi)!$WELCOME_ICON_WIKI!$(ltr general_info_witip)":fbtn        "WelcomeBrowser https://discovery.endeavouros.com"
      --field=" $(ltr general_info_ne)!$WELCOME_ICON_NEWS!$(ltr general_info_netip)":fbtn        "WelcomeBrowser https://endeavouros.com/news"
      --field=" $(ltr general_info_fo)!$WELCOME_ICON_FORUM!$(ltr general_info_fotip)":fbtn        "WelcomeBrowser https://forum.endeavouros.com"
      --field=" $(ltr general_info_do)!$WELCOME_ICON_DONATE!$(ltr general_info_dotip)":fbtn        "WelcomeBrowser https://endeavouros.com/donate"
      --field=" $(ltr general_info_ab)!$WELCOME_ICON_ABOUT_WELCOME!$(ltr general_info_abtip)":fbtn        "WelcomeBrowser https://discovery.endeavouros.com/endeavouros-tools/welcome"
  )

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}

w_WARN() {
    local msg="$1"
    shift
    eos_yad_WARN "$PRETTY_PROGNAME: ${FUNCNAME[1]}: $msg" --height=200 --width=500 "$@"
}
export -f w_WARN

RunIfInstalled() {
    # Usage: $FUNCNAME -a="app" [-p="pkg"] [app-parameters]

    local app="" pkg=""
    local opt

    while [ -n "$1" ] ; do
        opt="$1"
        case "$opt" in
            -a=*) app="${opt#*=}" ; shift ;;
            -p=*) pkg="${opt#*=}" ; shift ;;
            -*) w_WARN "unsupported option '$opt'" --text="Option unsupported" ; return 1 ;;
            *) break ;;
        esac
    done

    if [ -z "$app" ] ; then
        w_WARN "app parameter (required) is empty" --text="Application name is empty"
        return 1
    fi
    if [ -z "$(which "$app" 2> /dev/null)" ] ; then
        if [ -n "$pkg" ] ; then
            w_WARN "app '$app' (from package '$pkg') not found" --text="Application not installed" --width=600
        else
            w_WARN "app '$app' not found" --text="Application not installed"
        fi
        return 1
    fi

    "$app" "$@"
}
export -f RunIfInstalled

UpdateWithEosAurHelper() {
    local helper="$1"
    RunInTerminal "echo '==> $helper' ; $helper"
}
export -f UpdateWithEosAurHelper

AddEosAurHelpers() {
    local helper=""
    local h2=""      # used for eos-update

    [ "$EOS_AUR_HELPER $EOS_AUR_HELPER_OTHER" = " " ] && return   # ad hoc check for settings

    for helper in $EOS_AUR_HELPER $EOS_AUR_HELPER_OTHER ; do
        # only paru or yay supported
        case "$helper" in
            yay  | /bin/yay  | /usr/bin/yay)  helper=yay ;;
            paru | /bin/paru | /usr/bin/paru) helper=paru ;;
            *) return ;;
        esac
        if [ -x /usr/bin/$helper ] ; then
            [ -z "$h2" ] && h2="$helper"
            tabcontents+=(
                --field=" $(ltr after_install_us) ($helper)!$WELCOME_ICON_SYSTEM_UPDATE!$(ltr after_install_ustip)":fbtn "UpdateWithEosAurHelper $helper"
            )
        fi
    done
    helper="$h2"
    tabcontents+=(
        --field=" $(ltr after_install_us) (eos-update --$helper)!$WELCOME_ICON_SYSTEM_UPDATE!$(ltr after_install_ustip)":fbtn "UpdateWithEosAurHelper 'eos-update --$helper'"
    )
}
export -f AddEosAurHelpers

AfterInstall() {
  local handle="$1"
  local tabnum="$2"
  local text="<b>$(ltr after_install_text)</b>"

  ButtonsMayHide text

  local _exclamation='&#33;'   # '!'
  local _and='&#38;'           # '&'
  local _question='&#63;'      # '?'

  local tabcontents=(
      eos_yad --align-buttons
      --use-interp  # don't need explicit 'bash -c' construct when calling functions
      --plug="$handle" --tabnum="$tabnum" --form --image=$WELCOME_ICON_INFO
      --text="$text" --columns=2
  )
  MirrorRankingButtons
  AddEosAurHelpers
  tabcontents+=(
      #--field=" $(ltr after_install_us) ($EOS_AUR_HELPER)!$WELCOME_ICON_SYSTEM_UPDATE!$(ltr after_install_ustip)":fbtn "UpdateWithEosAurHelper"     # "RunInTerminal UpdateInTerminal --lang=$lang"
      --field=" $(ltr after_install_pclean)!$WELCOME_ICON_PACCACHE_SRV!$(ltr after_install_pcleantip)":fbtn 'paccache-service-manager'
  )

  if [ -x /usr/bin/eos-update-notifier-configure ] ; then
      tabcontents+=(--field=" $(ltr after_install_conf) eos-update-notifier!$WELCOME_ICON_UPDATE_NOTIFIER_CONF!$(ltr after_install_conf) eos-update-notifier":fbtn "eos-update-notifier-configure")
  fi

  if [ "$(eos_GetArch)" != "armv7h" ] ; then
      tabcontents+=(--field=" $(ltr after_install_cdm)!$WELCOME_ICON_CHANGE_DISPLAY_MANAGER!$(ltr after_install_cdmtip)":fbtn 'yad_ChangeDisplayManager')
  fi

  ShowChangeResoButton

  tabcontents+=(
      --field=" $(ltr after_install_ew)!$WELCOME_ICON_WALLPAPER_SET_DEFAULT!$(ltr after_install_ewtip)":fbtn    'eos-wallpaper-set DEFAULT'
      --field=" $(ltr after_install_ew2)!$WELCOME_ICON_WALLPAPER_SET!$(ltr after_install_ewtip2)":fbtn  'eos-wallpaper-set'
      --field=" $(ltr after_install_more_wall)!$WELCOME_ICON_WALLPAPER_DOWNLOAD!$(ltr after_install_more_wall_tip)":fbtn  'RunInTerminal eos-download-wallpapers'
  )
  if IsR8168Card ; then
      tabcontents+=(
          --field=" $(ltr after_install_r8168)!$WELCOME_ICON_TOGGLE_r8169_DRIVER!$(ltr after_install_r8168_tip)":fbtn "ethernet_toggle_r8168_r8169"
      )
  fi
  tabcontents+=(--field=" $(ltr ins_logtool)!$WELCOME_ICON_SYSTEM_LOGS!$(ltr ins_logtooltip)":fbtn  "eos-log-tool" )
  VboxGuestEnable

  case "$CurrentDesktop" in
      xfce) AddXfceThemingButtons ;;
  esac

  tabcontents+=(--field=" $(ltr after_install_itab)!$WELCOME_ICON_INITIAL_TAB!$(ltr after_install_itab_tip)":fbtn "bash -c WelcomeInitialTab")

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}

AddXfceThemingButtons() {
    XfceTheming() {
        local -r new_theme="$1"
        local -r date_time=$(date +%Y%m%d-%H:%M.%S)
        local -r conf="$HOME/.config"
        local -r conf2='~/.config'
        local -r bak=xfce-theme-bak
        local -r dirs=(xfce4 Thunar)
        local -r dirs_list=$(echo "${dirs[*]}" | tr ' ' ',')
        local dir
        local msg=""
        msg+="About to change the Xfce theme to '$new_theme'.\n"
        msg+="The current theme will be saved under folder $conf2/$bak/$date_time\n"
        msg+="The new theme will be in folders $conf2/{$dirs_list}\n\n"
        msg+="Accept theme change and reboot now?"

        eos_yad --form --title="Change Xfce theme to $new_theme" --text="$msg" --image=preferences-desktop-theme \
                --button='yad-cancel!!Do nothing':1 --button='yad-ok!!Accept theme change and reboot now':0

        case "$?" in
            0)
                mkdir -p "$conf/$bak/$date_time"
                for dir in "${dirs[@]}" ; do
                    mv "$conf/$dir" "$conf/$bak/$date_time/$dir" || return 1                   # save current theme
                    case "$new_theme" in
                        EOS) cp -r "/etc/skel/.config/$dir" "$conf/" || return 1 ;;            # apply EOS theme
                        vanilla) ;;                                                            # will apply vanilla theme after reboot
                    esac
                done
                sleep 1
                reboot
                ;;
        esac
    }
    export -f XfceTheming
    tabcontents+=(
        --field=" $(ltr after_install_themevan)!preferences-desktop-theme!$(ltr after_install_themevantip)":fbtn "XfceTheming vanilla"
        --field=" $(ltr after_install_themedef)!preferences-desktop-theme!$(ltr after_install_themedeftip)":fbtn "XfceTheming EOS"
    )
}


PacdiffIcon() {
    # see /etc/eos-script-lib-yad.conf for differs

    for differ in "${EOS_WELCOME_PACDIFFERS[@]}" ; do
        if [ -x /usr/bin/$differ ] ; then
            case "$differ" in
                kompare)      differ_icon=$differ ;;
                meld)         differ_icon=org.gnome.meld ;;
                *)            differ_icon=$(eos_IconGrasp "$differ") ;;                    #kdiff3|diffuse|code|vim)
            esac
            break
        fi
    done
}

DailyAssistant() {
  local handle="$1"
  local tabnum="$2"
  local text="<b>$(ltr daily_assistant_text)</b>"

  ButtonsMayHide text

  local _exclamation='&#33;'   # '!'
  local _and='&#38;'           # '&'

  local differ=""                         # PacdiffIcon may change
  local differ_icon=preferences-system    # PacdiffIcon may change

  PacdiffIcon

  local tabcontents=(
      eos_yad --align-buttons --use-interp  # don't need explicit 'bash -c' construct when calling functions
      --plug="$handle" --tabnum="$tabnum" --form --image=$WELCOME_ICON_INFO
      --text="$text" --columns=2
      # --field=" $(ltr after_install_us) ($EOS_AUR_HELPER)!$WELCOME_ICON_SYSTEM_UPDATE!$(ltr after_install_ustip)":fbtn "UpdateWithEosAurHelper"    # "RunInTerminal UpdateInTerminal --lang=$lang"
      # --field=" $(ltr after_install_us) (UpdateInTerminal)!$WELCOME_ICON_SYSTEM_UPDATE!$(ltr after_install_ustip)":fbtn "RunInTerminal UpdateInTerminal --lang=$lang"
  )
  AddEosAurHelpers
  MirrorRankingButtons
  tabcontents+=(--field=" Pacdiff $_and $differ!$differ_icon!$(ltr after_install_pacdiff_tip) $differ":fbtn "eos-pacdiff --nt")
  tabcontents+=(
      --field=" $(ltr ins_logtool)!$WELCOME_ICON_SYSTEM_LOGS!$(ltr ins_logtooltip)":fbtn  "eos-log-tool"
      --field=" $(ltr daily_assist_anews)!$WELCOME_ICON_NEWS!$(ltr daily_assist_anewstip)":fbtn "WelcomeBrowser https://archlinux.org/news"
  )

  # General app browsing buttons:
  if [ "$(eos_GetArch)" = "armv7h" ] ; then
      tabcontents+=(
          --field=" $(ltr add_more_apps_arch)!!$(ltr add_more_apps_done2_tip1)":fbtn "WelcomeBrowser https://www.archlinuxarm.org/packages"
      )
  else
      tabcontents+=(
          --field=" $(ltr add_more_apps_arch)!!$(ltr add_more_apps_done2_tip1)":fbtn "WelcomeBrowser https://www.archlinux.org/packages"
      )
  fi
  tabcontents+=(
      --field=" $(ltr add_more_apps_aur)!!$( ltr add_more_apps_done2_tip2)":fbtn "WelcomeBrowser https://aur.archlinux.org/packages"
      --field=" $(ltr daily_assist_apps)!!$(ltr daily_assist_apps_tip)":fbtn "WelcomeBrowser https://wiki.archlinux.org/title/List_of_applications"
  )

  if [ -n "$CurrentDesktop" ] ; then
      tabcontents+=(
          --field=" $CurrentDesktop: $(ltr daily_assist_DEinfo)!!$CurrentDesktop: $(ltr daily_assist_DEinfo_tip)":fbtn   "WelcomeBrowser https://wiki.archlinux.org/title/$CurrentDesktop"
      )
  fi

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}

WelcomeInitialTab() {
    ## Welcome tabs are numbered starting from 1.
    ## Note1: This setting is not used while installing.
    ## Note2: This overrides the related setting 'activate_own_commands_tab'
    ##        or the first parameter in call to personal_commands_init()
    ##        in file ~/.config/welcome-own-cmds.conf.

    if [ ! -r "$welcome_configurator" ] ; then
        echo "EOS_WELCOME_ACTIVE_TAB_NUMBER=2  # default: 2 (=After Install)" > $welcome_configurator
    fi
    source "$welcome_configurator"
    [ -z "$EOS_WELCOME_ACTIVE_TAB_NUMBER" ] && export EOS_WELCOME_ACTIVE_TAB_NUMBER=2

    local count="$_NOTEBOOK_TABS_COUNT"
    local txt=""
    txt+="Welcome tabs are numbered from 1 to $count.\n"
    txt+="For example, the <b>After Install</b> tab is number 2.\n"
    txt+="Select the number of the Welcome tab to show initially.\n"
    txt+="After selecting the initial tab, Welcome will be restarted.\n"
    local cmd=(
        eos_yad --form --align-buttons --use-interp --title="Welcome initial tab"
        --text="$txt" --image=$WELCOME_ICON_PREFERENCES
        --field="Initial tab number\t\t":num "$EOS_WELCOME_ACTIVE_TAB_NUMBER!1..$count!1"
    )
    local result="$("${cmd[@]}" | cut -d '|' -f1)"
    [ -z "$result" ] && return
    sed -i $welcome_configurator -e "s|^EOS_WELCOME_ACTIVE_TAB_NUMBER=[0-9]*|EOS_WELCOME_ACTIVE_TAB_NUMBER=$result|"

    local tmpfile=$(mktemp $HOME/.cache/.greeter_restart.XXXXX)
    cat <<EOF > $tmpfile
pkill -f "/usr/bin/yad --window-icon=$EOS_WICON"
sleep 0.2
eos-welcome ${WELCOME_ARGS} &
sleep 0.5
rm -f $tmpfile
EOF
    chmod +x $tmpfile
    $tmpfile
}
export -f WelcomeInitialTab

Github2Gitlab() {
    eos-github2gitlab "$@"
}
export -f Github2Gitlab

UsefulTips() {
  local handle="$1"
  local tabnum="$2"
  local _and='&#38;'           # '&'
  local text="<b>$(ltr useful_tips_text)</b>"

  ButtonsMayHide text

  local tabcontents+=(
      eos_yad --align-buttons --use-interp
      --plug="$handle" --tabnum="$tabnum" --form --columns=2
      --image=$WELCOME_ICON_TIPS
      --text="$text"

      --field=" $(ltr after_install_pm)!$WELCOME_ICON_TIPS!$(ltr after_install_pmtip)":fbtn     "WelcomeBrowser 'https://discovery.endeavouros.com/?s=pacman'"
      --field=" $(ltr after_install_ay)!$WELCOME_ICON_TIPS!$(ltr after_install_aytip)":fbtn     "WelcomeBrowser 'https://discovery.endeavouros.com/category/aur'"
  )
  if [ -x /usr/bin/firewalld ] ; then
      tabcontents+=(--field=" $(ltr after_install_fw)!$WELCOME_ICON_TIPS!$(ltr after_install_fwtip)":fbtn "WelcomeBrowser   'https://discovery.endeavouros.com/applications/firewalld/2022/03'")
  fi
  tabcontents+=(
      --field=" $(ltr after_install_hn)!$WELCOME_ICON_TIPS!$(ltr after_install_hntip)":fbtn     "WelcomeBrowser 'https://discovery.endeavouros.com/?s=Hardware'"
      --field=" $(ltr after_install_bt)!$WELCOME_ICON_TIPS!$(ltr after_install_bttip)":fbtn     "WelcomeBrowser 'https://discovery.endeavouros.com/bluetooth/bluetooth/2021/03'"  # 'https://discovery.endeavouros.com/bluetooth'
  )
  test "$(eos_GetArch)" != "armv7h" && tabcontents+=(--field=" $(ltr after_install_nv)!$WELCOME_ICON_TIPS!$(ltr after_install_nvtip)":fbtn "WelcomeBrowser https://discovery.endeavouros.com/category/nvidia")
  tabcontents+=(
      --field=" $(ltr after_install_ft)!$WELCOME_ICON_TIPS!$(ltr after_install_fttip)":fbtn     "WelcomeBrowser https://discovery.endeavouros.com/forum-log-tool-options/how-to-include-systemlogs-in-your-post"
      --field=" EndeavourOS $_and ARM!$WELCOME_ICON_ARM!EndeavourOS $_and ARM $(ltr after_install_info)":fbtn      "WelcomeBrowser https://arm.endeavouros.com"
      --field=" $(ltr butt_owncmds_help)!$WELCOME_ICON_TIPS!$(ltr nb_tab_owncmdstip)":fbtn      "WelcomeBrowser $(Github2Gitlab https://github.com/endeavouros-team/PKGBUILDS/blob/master/welcome/Adding-own-commands.md)"
      --field=" $(ltr butt_owncmds_dnd)!$EOS_WICON!$(ltr butt_owncmds_dnd_help)":fbtn   "welcome-dnd"
  )

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}

AddMoreApps() {
  local handle="$1"
  local tabnum="$2"
  local text=""

  local tabcontents=(
      eos_yad --align-buttons --use-interp
      --plug="$handle" --tabnum="$tabnum" --form --text-align=left --columns=2
      --image=$WELCOME_ICON_INSTALL_INFO
  )
  local shown_app_buttons=0

  ((shown_app_buttons++))
  tabcontents+=(--field=" $(ltr add_more_apps_qs)!$EOS_WICON!$(ltr add_more_apps_qstip)":fbtn "eos-quickstart")

  tabcontents+=(--field=" $(ltr daily_assist_apps)!!$(ltr daily_assist_apps_tip)":fbtn "WelcomeBrowser https://wiki.archlinux.org/title/List_of_applications")
  tabcontents+=(--field=" $(ltr add_more_apps_aur)!!$( ltr add_more_apps_done2_tip2)":fbtn "WelcomeBrowser https://aur.archlinux.org/packages")

  # General app browsing buttons:
  if [ "$(eos_GetArch)" = "armv7h" ] ; then
      tabcontents+=(--field=" $(ltr add_more_apps_arch)!!$(ltr add_more_apps_done2_tip1)":fbtn "WelcomeBrowser https://www.archlinuxarm.org/packages")
  else
      tabcontents+=(--field=" $(ltr add_more_apps_arch)!!$(ltr add_more_apps_done2_tip1)":fbtn "WelcomeBrowser https://www.archlinux.org/packages")
  fi

  # Now we know if we have any apps in the install list.

  if [ $shown_app_buttons -eq 0 ] ; then
      text="<b>$(ltr add_more_apps_done1_text)$(ltr add_more_apps_done2_text)</b>"
  else
      text="<b>$(ltr add_more_apps_text) $(ltr add_more_apps_done2_text)</b>"
  fi
  ButtonsMayHide text
  tabcontents+=(--text="$text")

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}

#### Support for personal commands:

personal_commands_add() {   # add one personal command
    local commandline="$1"
    local name="$2"
    local icon="$3"
    local description="$4"
    local cmd="$5"

    [ -n "$description" ] || description="$commandline"
    [ -n "$cmd" ] || cmd="$(echo "$commandline" | /usr/bin/awk '{print $1}')"

    if (/usr/bin/which $cmd &> /dev/null) ; then
        welcome_own_commands+=(--field=" $name!$icon!$description":fbtn "$commandline")
    else
        printf "%s: %s\n    %s\n" "$(/usr/bin/date "+%x %X")" "$FUNCNAME:" "warning: command '$cmd' not found" >> /tmp/welcome-personal-commands.log
        echo "$FUNCNAME: warning: command '$cmd' not found" >&2
    fi
}

personal_commands_init() {  # initialize user settings for personal commands
    [ -n "$1" ] && activate_own_commands_tab="$1"
    [ -n "$2" ] && columns_for_own_commands="$2"
    [ -n "$3" ] && show_predefined_buttons_at_own_commands="$3"
}

_align_buttons_on_tab() {
    # handles old _align() marking in ~/.config/welcome-own-cmds.conf

    local -n arr="$1"
    local handle="$2"
    local ix xx

    # just remove possible legacy "_align(...) construct"
    ix=0
    for xx in "${arr[@]}" ; do
        case "$xx" in
            --field=*)
                if [ "$xx" != "${xx/*_align(/}" ] ; then
                    arr[$ix]="$(echo "$xx" | sed 's|_align(\(.*\))!| \1!|')"
                fi
                ;;
        esac
        ((ix++))
    done
}

OwnCommands() {
  local handle="$1"
  local tabnum="$2"
  local cols="$columns_for_own_commands"
  local show_buttons="$show_predefined_buttons_at_own_commands"

  case "$show_buttons" in
      no) ;;
      *) show_buttons=yes ;;
  esac

  while true ; do
      if [ -z "$cols" ] ; then
          cols=2
      elif [ -n "$(echo "$cols" | tr -d '0-9')" ] ; then
          cols=2
          echo "Warning: value '$columns_for_own_commands' for variable 'columns_for_own_commands' is unsupported, using $cols." >&2
      elif [ $cols -lt 1 ] || [ $cols -gt 20 ] ; then
          cols=2
          echo "Warning: value '$columns_for_own_commands' for variable 'columns_for_own_commands' is unsupported, using $cols." >&2
      fi
      break
  done

  local tabcontents=(
      eos_yad --align-buttons --use-interp
      --plug="$handle" --tabnum="$tabnum" --form --columns=$cols
      --image=$WELCOME_ICON_OWN_COMMANDS
      --text="<b>$(ltr nb_tab_owncmds_text)</b>"
  )
  if [ "$show_buttons" = "yes" ] ; then
      tabcontents+=(
          --field=" $(ltr butt_owncmds_help)!$WELCOME_ICON_TIPS!$(ltr nb_tab_owncmdstip)":fbtn
                  "WelcomeBrowser $(Github2Gitlab https://github.com/endeavouros-team/PKGBUILDS/blob/master/welcome/Adding-own-commands.md)"
          --field=" $(ltr butt_owncmds_dnd)!$EOS_WICON!$(ltr butt_owncmds_dnd_help)":fbtn  "welcome-dnd"
      )
  fi
  tabcontents+=("${welcome_own_commands[@]}")

  _align_buttons_on_tab tabcontents "$handle"

  [ "$handle" != "calculate" ] && "${tabcontents[@]}" >& /dev/null &
}


# Fields explanation:
# --field="ButtonName!IconName!Tooltip":fbtn "Command"

### These variables are required:

CreateNotebookCommands() {
    if IsInstalling ; then
        _NOTEBOOK_TABS=(                             # names of functions above
            INSTALL
            GeneralInfo
        )
    else
        _NOTEBOOK_TABS=(                             # names of functions above
            GeneralInfo
            AfterInstall
            DailyAssistant
            UsefulTips
            AddMoreApps
        )
    fi
    if [ -n "$welcome_own_commands" ] ; then
        _NOTEBOOK_TABS+=(OwnCommands)
    fi
    export _NOTEBOOK_TABS_COUNT=${#_NOTEBOOK_TABS[@]}
}

####################### DO NOT CHANGE ANYTHING AFTER THIS LINE! ######################################################

DIE() {
    local title="Error"
    while true ; do
        echo "Error: $1."
        Usage
        break
    done | eos_yad_problem "$title" --fontname="Mono 10" --height=700 "$@"
    exit 1
}

WelcomeHelp_opt() {
    Usage | eos_yad --text-info --title="$WH_BUTT_TITLE" --width=700 --height=500 \
                    --fontname="Mono 10" \
                    --text="<b>$WH_BUTT_TEXT</b>" \
                    --text-align=left \
                    --image=$WELCOME_ICON_HELP --button=yad-ok:0
}
WelcomeHelp() {
    WelcomeBrowser "https://discovery.endeavouros.com/endeavouros-tools/welcome"
}
export -f WelcomeHelp

WelcomeBrowser() {
    $_WELCOME_BROWSER "$1" &>/dev/null
}
export -f WelcomeBrowser

WelcomeChangelog() {
    WelcomeBrowser "$(Github2Gitlab https://github.com/endeavouros-team/PKGBUILDS/commits/master/welcome)"
}
export -f WelcomeChangelog

ImportantNews() {
    WelcomeBrowser "$(Github2Gitlab https://github.com/endeavouros-team/Important-news/blob/main/README.md)"
}
export -f ImportantNews

SetBrowser() {
    local xx
    [ -n "$_WELCOME_BROWSER" ] && return
    export _WELCOME_BROWSER="$(eos_select_browser)"
}
export -f SetBrowser

PrepareTabs() {
    local handle="$1"
    local xx ix

    ix=1
    for xx in "${_NOTEBOOK_TABS[@]}" ; do
        $xx "$handle" "$((ix++))" "$xx"
    done
}

SeparateWordsWithSpaces() { # add a space before a capital letter inside a word
    local tabname="$1"

    if [ "$(echo "$tabname" | tr -d '[a-z]')" = "$tabname" ] ; then
        echo "$tabname"           # all capital letters ==> don't change
    else
        echo "$tabname" | sed -e 's|\([A-Z]\)| \1|g' -e 's|^ ||'  # add space before capital letters
    fi
}


WelcomeSettings() {
    local value="$1"   # enable, disable, check
    declare -A defaults
    local xx

    defaults[Greeter]="Greeter=enable"
    defaults[LastCheck]="LastCheck=0"
    defaults[OnceDaily]="OnceDaily=no"

    # Make sure we have sensible initial values in the config file.
    if [ ! -r "$WELCOME_CONFIG" ] ; then
        cat <<EOF > "$WELCOME_CONFIG"
## Configuration file for $PROGNAME.
# Note: using bash syntax.
#
# 'Greeter'   values: enable or disable.
# 'OnceDaily' values: no or yes; yes means $PROGNAME is shown only once a day.
# 'LastCheck' values: automatically filled by $PROGNAME.

EOF
    fi

    for xx in Greeter OnceDaily LastCheck ; do
        if [ -z "$(grep "^${xx}=" "$WELCOME_CONFIG" 2>/dev/null)" ] ; then
            echo "${defaults[$xx]}" >> "$WELCOME_CONFIG"
        fi
    done

    # Now the initial values are in order.

    case "$value" in
        enable | disable)
            sed -i "$WELCOME_CONFIG" -e 's|^Greeter=.*$|Greeter='"$value"'|'
            ;;
    esac

    case "$value" in
        disable)
            eos_yad --form --image=$WELCOME_ICON_INFO --text="$(ltr settings_dis_contents)" \
                    --title="$(ltr settings_dis_title)" \
                    --button=" $(ltr settings_dis_butt)!$WELCOME_ICON_HONEST!$(ltr settings_dis_buttip)":11
            ;;
        check)
            grep "^Greeter=" "$WELCOME_CONFIG" 2>/dev/null | cut -d '=' -f 2
            ;;
        continue)
            if [ "$(grep "^OnceDaily=" "$WELCOME_CONFIG" 2>/dev/null | cut -d '=' -f 2)" = "no" ] ; then
                echo yes
                return
            fi
            local date="$(date +%Y%m%d)"
            if [ "$(grep "^LastCheck=" "$WELCOME_CONFIG" 2>/dev/null | cut -d '=' -f 2)" = "$date" ] ; then
                echo "Info: Stopping because of setting OnceDaily=yes in file $WELCOME_CONFIG." >&2
                echo no
            else
                echo yes
            fi
            sed -i "$WELCOME_CONFIG" -e 's|^LastCheck=.*$|LastCheck='"$date"'|'
            ;;
    esac
}

IsR8168Card() {
    # Return 0 if ethernet card is realtek 8168.

    if [ 0 -eq 1 ] && [ "$testing" = "yes" ] ; then   # this is only for testing
        return 0
    fi

    if [ -n "$(/usr/bin/lspci | /usr/bin/grep -w "Ethernet controller" | /usr/bin/grep -w 8168)" ] ; then   # have the card?
        if [ -n "$(lsmod | grep -Pw 'r8169|r8168')" ] ; then                                                # driver is in use?
            return 0
        fi
    fi
    return 1
}
export -f IsR8168Card

ethernet_toggle_r8168_r8169() {
    local cmds=":"
    local prompt=""
    if (! IsInstalled r8168) ; then
        prompt="echo 'r8169 ==> r8168'"
        if (eos-connection-checker) ; then
            cmds+="; pacman -Syu --noconfirm r8168"
        else
            local pkg="$(/usr/bin/ls -1 /opt/extra-drivers/r8168-*-x86_64.pkg.tar.zst 2>/dev/null)"  # may find it in /opt/extra-drivers !
            if [ -n "$pkg" ] ; then
                cmds="; pacman -U --noconfirm $pkg"
            else
                w_WARN "sorry, cannot install r8168 because there's no internet connection."
                return 1
            fi
        fi
        cmds+="; modprobe -r r8169 2>/dev/null"
        cmds+="; modprobe r8168 2>/dev/null"
    else
        prompt="echo 'r8168 ==> r8169'"
        cmds+="; pacman -Rsn --noconfirm r8168"
        cmds+="; modprobe -r r8168 2>/dev/null"
        cmds+="; modprobe r8169 2>/dev/null"
    fi
    cmds+="; systemctl restart NetworkManager"
    RunInTerminal "$prompt ; $EOS_ROOTER '$cmds'"
}
export -f ethernet_toggle_r8168_r8169

R8168check_at_install() {
    local card8168="$(lspci -vnn | grep -w Ethernet | grep -w Realtek | grep -w 8168 )"
    if [ -n "$card8168" ] ; then
        # we have 8618 card
        local cardid="$(echo "$card8168" | sed 's|.*\[\([^]]*\)\].*|\1|')"    # e.g. "10ec:8168"
        case "$cardid" in
            # 10ec:8168) ;;                # card id is known to work with kernel's r8169 module
            *)
                # Package r8168 is available in /opt/extra-drivers.
                local txt=""
                txt+="Your Ethernet card is set to use the kernel driver r8169 by default.\n"
                txt+="In some rare cases the r8168 driver works better.\n"
                txt+="If your Ethernet connection has problems with r8169, you can use the r8168 driver.\n"
                local cmd=(
                    eos_yad
                    --form
                    --image=$WELCOME_ICON_QUESTION
                    --title="Select the driver for the Realtek 8168 Ethernet card"
                    --text="$txt"
                    --button="r8168":1
                    --button="r8169 (default)":3
                )
                "${cmd[@]}"
                case "$?" in
                    1)
                        # use r8168 which is stored at /opt/extra-drivers
                        local pkg="$(/usr/bin/ls -1 /opt/extra-drivers/r8168-*-x86_64.pkg.tar.zst 2>/dev/null)"
                        if [ -n "$pkg" ] ; then
                            sudo pacman -U --noconfirm $pkg
                            sudo modprobe -r r8169 2>/dev/null
                            sudo modprobe r8168 2>/dev/null
                            sudo systemctl restart NetworkManager
                        fi
                        ;;
                esac
                ;;
        esac
    fi
}

MagicId_new() {
    # special support for user_commands.bash

    if (! IsInstalling) ; then
        echo "Option '--ni' is only an install time feature." >&2
        return 1
    fi

    local id="$1"     # URL or special id
    local url=""

    case "$id" in
        "")
            echo "Option --ni: URL or special id is missing'." >&2
            return 1
            ;;
        https://* | http://*)
            url="$id"
            ;;
        *)
            # use special id
            url=https://raw.githubusercontent.com/endeavouros-team/sandbox/master/pkg/list  # currently not in gitlab!
            local data=$(curl -Lsm 10 -o- $url)
            [ -n "$data" ] || { echo "Option --ni: failed to fetch data." >&2 ; return 1 ; }
            url=$(echo "$data" | grep "^$id"= | cut -d'=' -f2)
            [ -n "$url" ] || { echo "Option --ni: URL not found." >&2 ; return 1 ; }
            ;;
    esac

    if [ ! -r /home/$EOS_LIVEUSER/user_commands.bash.bak ] ; then
        cp /home/$EOS_LIVEUSER/user_commands.bash /home/$EOS_LIVEUSER/user_commands.bash.bak
    fi
    if ! curl --fail -Lsm 10 -o/home/$EOS_LIVEUSER/user_commands.bash "$url" ; then
        echo "Sorry, cannot find URL $url" >&2
        return 1
    fi
    return 0
}
export -f MagicId_new

MagicId() {
    local ENDEAVOUROS_TEAM=https://raw.githubusercontent.com/endeavouros-team
    if (! IsInstalling) ; then
        echo "Sorry, option --id is only an install feature." >&2
        return 1
    fi
    local id="$1"
    if [ -z "$id" ] ; then
        echo "Id value missing." >&2
        return 1
    fi
    local target=$HOME/user_pkglist.txt
    local time
    local data="$(curl -s $ENDEAVOUROS_TEAM/sandbox/master/pkg/list)"
    if [ -z "$data" ] ; then
        echo "Error: list not found." >&2
        return 1
    fi
    local url="$(echo "$data" | grep "^$id=" | sed "s|^$id=||")"
    if [ -z "$url" ] ; then
        echo "Id '$id' not found." >&2
        return 1
    fi
    if [ -r $target ] ; then
        time=$(date +%Y%m%d-%H%M-%S)
        echo "Moving existing $target to $target.$time" >&2
        mv $target $target.$time
    fi
    if (! Wget2Curl -q -O $target "$url") ; then
        echo "Sorry, URL '$url' not found. " >&2
        [ -r $target.$time ] && mv $target.$time $target
        return 1
    fi
    case "$id" in
        ma) if (! Wget2Curl -q -O pkglist_install.sh "$ENDEAVOUROS_TEAM/sandbox/master/pkg/pkglist_install.sh") ; then
                echo "Warning: cannot fetch pkglist_install.sh from sandbox" >&2
                return 1
            fi
            sudo cp pkglist_install.sh /usr/lib/calamares/modules/user_pkglist/
            ;;
    esac
    echo "$target: OK" >&2
}

VboxGuestEnable() {
    case "$(device-info --vm)" in
        virtualbox)
            if [ -n "$(systemctl status vboxservice 2>/dev/null | grep "inactive (dead)")" ] ; then
                local label="$(ltr after_install_vbox1)"
                local msg1="$(ltr after_install_vbox2)"
                local cmd="systemctl enable --now vboxservice.service"
                local msgvb="$msg1\n<b>$label</b>"
                local icon=$WELCOME_ICON_TIPS
                eos_yad --form --title="Info" --text="$msgvb" --image=$WELCOME_ICON_TIPS --button=yad-quit:0 &
                tabcontents+=(--field=" $label!$WELCOME_ICON_RUNINTERMINAL!$cmd":fbtn "RunInTerminal $cmd")
            fi
            ;;
    esac
}

KillExtraYad() {
    sleep 0.2
    eos-kill-yad-zombies
}

Usage() {
    cat <<EOF
===== $PROG_PACKAGENAME $PROG_VERSION =====

Usage: $PROGNAME [options]

Options:
--startdelay=X    Wait before actually starting this app.
                  X value syntax is the same as in 'sleep'.
--enable | -f     Enable this $PRETTY_PROGNAME app.
--disable         Disable this $PRETTY_PROGNAME app.
--once | -1       Run $PRETTY_PROGNAME once, even if it is disabled.
--version         Show the version of this app.
--lang=X          Use language X on the user interface.

To have $PRETTY_PROGNAME app started when you log in, make sure
- $PRETTY_PROGNAME app is selected in the Autostart feature of the DE
    OR
- "Hidden=false" is set in file /etc/xdg/autostart/welcome.desktop

On DEs that do not work well with Autostart:
You may also disable the $PRETTY_PROGNAME app from the app itself
- with the --disable option
- with a button in the app (some DEs only)

To re-enable the app, use the terminal command
    $PROGNAME --enable

Note: check also settings in the configuration file $WELCOME_CONFIG2.

Option --lang=X is currently experimental and supports only a very small set
of languages. The value X should consist of two lowercase letters
(like 'en' for English or 'de' for German).
If option --lang is not given, the value is extracted from
the first two letters of the environment variable LANG (now: ${LANG::2}).
EOF
}
export -f Usage


#Experimental options:
#--genlang=X       Generate language X support for the user interface of the Welcome app.
#                  X is a shorthand of two lowercase letters, like de, en, or fr.
#                  Note: requires package 'translate-shell' to be already installed.
#                  Try command 'trans -R' to see a list of available languages.

#--changelog       Show the changelog of this package.

# --tr-prefer=X     Prefer either 'manual' or 'generated' language on the user interface.
#                   Note: value 'generated' is meaningful only after option --genlang has
#                   been used at least once.

#Install time options:
#--pkglist=URL     User can give an URL to a file that contains a list of additional packages
#                  to install. Package names are listed as one package name per line.
#                  Empty lines and comments (lines starting with character #) are allowed.

GetCurrentDesktop() {
    local -n _de="$1"
    local DE="" ; eos_yad__detectDE
    _de="$DE"
}

GetIsoVersion() {
    if [ -z "$ISO_VERSION" ] ; then
        local file=/usr/lib/endeavouros-release
        if [ -r $file ] ; then
            ISO_VERSION="$(grep "^VERSION=" $file | sed -E 's|^VERSION=([0-9\.]+).*|\1|')"
        fi
    fi
}

GetIsoDateStr() {
    echo "ISO: $ISO_VERSION"
}

SetCalamaresVersionInfo() {
    if [ -n "$ISO_VERSION" ] ; then
        local file=/etc/calamares/branding/endeavouros/branding.desc
        if [ -f $file ] ; then
            local str

            for str in "version:" "shortVersion:" ; do
                if [ "$(grep -w "$str" $file | awk '{print $2}')" != "$ISO_VERSION" ] ; then
                    sudo sed -i $file -E "s|^([ ]+$str[ ]+).*|\1$ISO_VERSION|"
                fi
            done
        fi
    fi
}

StartHere() {
    local arg lang
    local yad_zombie_log=/tmp/yad-zombies.log
    local tr_engine=bing
    local tr_prefer=manual
    local pb_percent=0
    local testing=no
    local allow_run_if_disabled=no            # yes = allow run even if disabled

    local welcome_own_commands=()
    local activate_own_commands_tab="no"
    local columns_for_own_commands="2"
    local show_predefined_buttons_at_own_commands="yes"
    local has_a_connection=no
    local ISO_VERSION=""                      # only for the installer
    local CurrentDesktop=""

    GetCurrentDesktop CurrentDesktop

    export show_installer=no    # explicitly show the installer, for testing only
    for arg in "$@" ; do
        case "$arg" in
            --installer) export show_installer=yes ;;
        esac
    done

    local is_installing
    IsInstalling && is_installing=yes || is_installing=no

    if eos-connection-checker ; then
        has_a_connection=yes
    else
        if [ $is_installing = yes ] ; then
            local sleeptime=1
            local rounds=10
            while true ; do
                eos_yad --form \
                        --title="What next?" \
                        --image=dialog-question \
                        --text="Internet connection not found.\nDo you want to quit, wait for a connection, or continue without a connection?" \
                        --button="Quit!Quit this program":1 \
                        --button="Wait $((sleeptime * rounds))s and ask!Wait a few seconds for a connection":3 \
                        --button="Wait indefinitely!dialog-question!Wait indefinitely for a connection":7 \
                        --button="Continue!Continue without connection":5
                case "$?" in
                    1) return ;;
                    3) for round in $(seq $rounds) ; do
                           sleep $sleeptime
                           if eos-connection-checker ; then
                               has_a_connection=yes
                               eos_yad --form --title="Connection OK" --text="Connection established, will continue." \
                                       --button=yad-ok --timeout=3 --no-focus --width=200
                               break 2
                           fi
                       done
                       ;;
                    5) break ;;
                    7) while true ; do
                           sleep $sleeptime
                           if eos-connection-checker ; then
                               has_a_connection=yes
                               eos_yad --form --title="Connection OK" --text="Connection established, will continue." \
                                       --button=yad-ok --timeout=3 --no-focus --width=200
                               break 2
                           fi
                       done
                       ;;
                esac
            done
        fi
    fi

    [ -z "$EOS_FILESERVER_SITE" ] && EOS_FILESERVER_SITE="gitlab"
    if [ "$is_installing" = "yes" ] ; then

        EOS_FILESERVER_SITE="$(eos-select-file-server)"        # do this first at install !!!

        if [ "$has_a_connection" = "yes" ] ; then
            local timezone="$(show-location-info timezone)"
            if [ -n "$timezone" ] ; then
                local preprelogfile="$(eos-select-file-server --logfilename)"
                echo "==> $PROGNAME: info: setting timezone to '$timezone'" >> "$preprelogfile"
                timedatectl set-timezone "$timezone"
                sleep 0.1
            fi
        fi

        GetIsoVersion
        # SetCalamaresVersionInfo
    fi
    export EOS_FILESERVER_SITE
    export EOS_AUR_HELPER
    [ -n "$EOS_AUR_HELPER_OTHER" ] && export EOS_AUR_HELPER_OTHER
    export WELCOME_ARGS="$*"

    for arg in "$@" ; do
        case "$arg" in
            --changelog)
                WelcomeChangelog
                return
                ;;
            --lang=*) lang="${arg#*=}" ;;
            --tr-engine=*) tr_engine="${arg#*=}" ;;
            --tr-prefer=*) tr_prefer="${arg#*=}" ;;
            --id=*) MagicId "${arg#*=}" || return 0 ;;
            --ni=*) MagicId_new "${arg#*=}" || return 0 ;;
            --genlang=*)
                lang="${arg#*=}"
                _init_translations --tr-engine="$tr_engine" --generate "$lang"
                return
                ;;
        esac
    done

    _init_translations --tr-prefer="$tr_prefer" "$lang" || { echo "language fail" >&2 ; exit 1 ; }

    AfterTranslations

    KillExtraYad > /tmp/yad-zombies.log

    local -r WELCOME_CONFIG="$HOME/.config/EOS-greeter.conf"      # "Welcome" used to be "Greeter" ...
    local -r WELCOME_CONFIG2='$HOME/.config/EOS-greeter.conf'
    export welcome_configurator="$HOME/.config/welcome.conf"      # another welcome config... should combine these

    if [ -r "$welcome_configurator" ] ; then
        if [ -n "$(grep "^local ConfVersion" "$welcome_configurator")" ] || [ -n "$(grep "^local MaxButtonNameLength" "$welcome_configurator")" ] ; then
            # this is an old config file, just delete the file
            rm -f "$welcome_configurator"
        fi
    fi

    if [ -r "$welcome_configurator" ] ; then
        source "$welcome_configurator"
    fi
    if [ -z "$EOS_WELCOME_ACTIVE_TAB_NUMBER" ] ; then
        EOS_WELCOME_ACTIVE_TAB_NUMBER=2
    fi
    export EOS_WELCOME_ACTIVE_TAB_NUMBER

    export user_pkglist_url=""
    local start_delay=0
    local _NOTEBOOK_TITLE="$PRETTY_PROGNAME v$PROG_VERSION"        # main window title

    if [ "$is_installing" = "yes" ] ; then
        [ -n "$ISO_VERSION" ] && _NOTEBOOK_TITLE+="  [$(GetIsoDateStr)]"
    fi

    for arg in "$@" ; do
        case "$arg" in
            --help|-h) WelcomeHelp_opt ; return ;;
            --enable|-f) WelcomeSettings enable ;;
            --disable)   WelcomeSettings disable ; return ;;
            --once | -1) allow_run_if_disabled=yes ;;
            --startdelay=*) start_delay="${arg#*=}" ;;
            --installer) ;;                                             # already handled!
            --version) echo "$PROG_VERSION" >&2 ; return ;;
            --lang=* | --tr-prefer=* | --tr-engine=* | --id=* | --ni=*) ;; # already handled!
            --testing) testing=yes ;;
            -*) DIE "unsupported option '$arg'" ;;
            *)  DIE "unsupported parameter '$arg'" ;;
        esac
    done
    export WELCOME_LANG="$lang"

    if [ "$(WelcomeSettings continue)" = "no" ] ; then
        return
    fi

    local own_commands_conf="$HOME/.config/welcome-own-cmds.conf"

    if [ -r    "$own_commands_conf" ] ; then
        source "$own_commands_conf"
    fi

    CreateNotebookCommands

    if [ "$(WelcomeSettings check)" != "enable" ] && [ "$allow_run_if_disabled" = "no" ]; then
        ltr2 welcome_disabled
        return
    fi

    if [ "$is_installing" = "yes" ] ; then
        R8168check_at_install
    fi

    if [ "$start_delay" != "0" ] ; then
        sleep "$start_delay"
    fi

    if [ "$is_installing" = "no" ] ; then
        local verbosity
        if [ "$EOS_WELCOME_CONNECTION_WARNING" = "yes" ] ; then
            verbosity=verbose
        else
            verbosity=none
        fi

        eos_yad_check_internet_connection $verbosity 2 "3s" "Welcome" || return 1

        if [ -n "$TERMINAL_AT_START" ] ; then
            arg="$(echo "$TERMINAL_AT_START" | awk '{print $1}')"
            which "$arg" 2>/dev/null && {
                $TERMINAL_AT_START &
            } || {
                echo "Warning: terminal '$arg' (setting TERMINAL_AT_START) in file /etc/eos-script-lib-yad.conf is not supported." >&2
            }
        fi
    else
        if [ "$has_a_connection" = "yes" ] ; then
            eos-kbd-set
        fi
        if [ -x /usr/bin/numlockx ] ; then
            # some laptops have number pad inside the normal keyboard, so set NumLock off
            numlockx on  # show we are adjusting numlock...
            sleep 1
            numlockx off
        fi
        if [ ! -r /tmp/mirrorlist.bu ] ; then
            if [ -r /etc/pacman.d/mirrorlist ] ; then
                cp /etc/pacman.d/mirrorlist /tmp/mirrorlist.bu  # to be checked by update-mirrorlist
            else
                Welog "Warning: cannot make a backup of mirrorlist!"
            fi
        fi
    fi

    SetBrowser

    local handle="$(shuf -i 700000-999999 -n 1)"
    local tab tabname
    local notebook   # contains the main yad command

    PrepareTabs "$handle" || DIE "PrepareTabs failed"

    # Create the yad command gradually into an array 'notebook':

    notebook=(eos_yad --notebook --key="$handle" --center --title="$_NOTEBOOK_TITLE")
    notebook+=(--use-interp)
    notebook+=(--expand)

    if [ "$is_installing" = "no" ] ; then
        # try to give a critical notification
        if [ "$has_a_connection" = "yes" ] ; then
            local news_date_url="$(Github2Gitlab https://raw.githubusercontent.com/endeavouros-team/Important-news/main/do_notify)"  # this file can contain one or more date defs, one per line
            local news_date="$(curl -Lsm 10 -o- $news_date_url)"
            if [ -n "$news_date" ] ; then
                notebook+=(--text="$(ltr nb_nofify_user1)\n$news_date\n$(ltr nb_nofify_user2) <b>$(ltr butt_softnews)</b> $(ltr nb_nofify_user3)\n")
            fi
        fi
    fi

    for tab in "${_NOTEBOOK_TABS[@]}" ; do
        tabname="$(ltr nb_tab_$tab)"
        #tabname="$(SeparateWordsWithSpaces "$tabname")"
        notebook+=(--tab="$tabname")
    done

    # Set the active tab number.
    local active_tab_nr=2                             # 2 = the After Install tab
    if [ "$is_installing" = "yes" ] ; then
        active_tab_nr=1
    elif [ -n "$EOS_WELCOME_ACTIVE_TAB_NUMBER" ] ; then
        active_tab_nr=$EOS_WELCOME_ACTIVE_TAB_NUMBER
    else
        if [ -n "$welcome_own_commands" ] ; then
            # 'activate_own_commands_tab' may have been set
            # in the "$own_commands_conf" file
            case "$activate_own_commands_tab" in
                [Yy][Ee][Ss])
                    active_tab_nr=6                       # 6 = the Personal Commands tab
                    ;;
            esac
        fi
    fi
    notebook+=(--active-tab=$active_tab_nr)

    if [ "$has_a_connection" = "yes" ] ; then
        notebook+=(--button=" $(ltr butt_softnews)!$WELCOME_ICON_APPDEV!$(ltr butt_softnews_tip)":"ImportantNews")
        notebook+=(--button=" $(ltr butt_changelog)!$WELCOME_ICON_CHANGELOG!$(ltr butt_changelogtip)":"WelcomeChangelog")
    fi
    case "$EOS_WELCOME_HAS_SEE_YOU_LATER_BUTTON" in
        yes)
            if [ "$has_a_connection" = "yes" ] ; then
                notebook+=(--button=" $(ltr butt_help)!$WELCOME_ICON_HELP_CONTENTS!":"WelcomeHelp")
            fi
            if [ "$is_installing" = "no" ] ; then
                notebook+=(--button=" $(ltr butt_noshow)!$WELCOME_ICON_LEAVE!$(ltr butt_noshow)":5)
            fi
            notebook+=(--button=" $(ltr butt_later)!face-cool!$(ltr butt_latertip)":0)
            ;;
        no|*)
            if [ "$has_a_connection" = "yes" ] ; then
                if [ "$is_installing" = "no" ] ; then
                    notebook+=(--button=" $(ltr butt_noshow)!$WELCOME_ICON_LEAVE!$(ltr butt_noshow)":5)
                fi
                notebook+=(--button=" $(ltr butt_help)!$WELCOME_ICON_HELP_CONTENTS!":"WelcomeHelp")
            else
                notebook+=(--button=yad-quit:1)
            fi
            ;;
    esac

    local error_log=/tmp/$PROGNAME.log
    local comment=""

    "${notebook[@]}" 2>/dev/null

    local result=$?

    case "$result" in
        5) WelcomeSettings disable ;;
        0) sleep 0.5 ; WelcomeSettings enable ;;
        252) ;;
        *)
            case "$result" in
                143) comment="   # likely caused by restarting the Welcome app" ;;
            esac
            echo "$(/usr/bin/date "+%x %X"): welcome exit code was: $result$comment" >> $error_log
            ;;
    esac
}

trap "sleep 0.2 ; eos-kill-yad-zombies --silent" EXIT

StartHere "$@"

exit 0
